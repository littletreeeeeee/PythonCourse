x = 8
print "x=", x, ", x id=", hex(id(x))
x = 9
print "x=", x, ", x id=", hex(id(x))


class Person:
    def __init__(self, age):
        self.age = age


p1 = Person(8)
print "p1 id=", hex(id(p1)), ", p1.age=", p1.age, " ,p1.age id=", hex(id(p1.age))
p1.age = 9
print "p1 id=", hex(id(p1)), ", p1.age=", p1.age, " ,p1.age id=", hex(id(p1.age))
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
l1 = list('abcdefg')
l2 = l1
l3 = l1[:]
l4 = list(l1)
print hex(id(l1)), hex(id(l2)), hex(id(l3)), hex(id(l4))
print l1, l2, l3, l4
l2[0] = 'A'
l1[1] = 'B'
l3[2] = 'C'
l4[3] = 'D'
print l1, l2, l3, l4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
left = ['A', 'K']
right = ['Q', 'J']
player1 = [left, right]
print player1
player2 = player1
import copy

player3 = copy.copy(player1) # duplicate parameter
player4 = copy.deepcopy(player1) #duplicate parameter and it's containing object
print hex(id(player1)), hex(id(player2)), hex(id(player3)), hex(id(player4))
print player1, player2, player3, player4
left[0] = 'JOKER'
print player1, player2, player3, player4
player1.append('10')
print player1, player2, player3, player4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dayOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
lengthArray = []
for day in dayOfWeek:
    lengthArray.append(len(day))
print lengthArray

print [len(day) for day in dayOfWeek]
print [day for day in dayOfWeek if len(day) > 6]
print [len(day) for day in dayOfWeek if len(day) < 8]
sun, mon, tue, wed, thr, fri, sat = dayOfWeek
print sun, wed, fri
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
number_list = [3, 1, 4, 1, 5, 9, 26, 83, 47, 100, 3, 9, 7]
r1 = sorted(x for x in number_list if x < 30)
print r1
r2 = sorted((y for y in number_list if y > 10), reverse=True)
print r2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
startRange = range(0, 20)
print startRange
for i in startRange:
    print i,
print "\n"
r2 = range(0, 10, 2)
print r2
# cmd
# pip install numpy
import numpy

r3 = numpy.arange(0, 20)
print type(r2), type(r3)
print r3
r4 = numpy.arange(0, 2, 0.1)
print r4
r5 = numpy.linspace(0, 20)
print r5
r6 = numpy.linspace(0, 20, 20)
print r6
r7 = numpy.linspace(0, 20, 21)
print r7
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dayOfWeek = ('sunday', 'monday')
print type(dayOfWeek), len(dayOfWeek)
dayOfWeek += ('tuesday', 'wednesday')
print dayOfWeek
dayOfWeek += ('thursday',)
print dayOfWeek
print type(('thursday')), type(('thursday',))
print ('thursday') * 5
print('thursday',) * 5
print dayOfWeek[0], dayOfWeek[len(dayOfWeek) - 1]
print dayOfWeek[-1], dayOfWeek[-len(dayOfWeek)]
# print dayOfWeek[len(dayOfWeek)]
list1 = list('ABCDEFG1234567abcdefg')
print list1[0], list1[len(list1) - 1]
print list1[-1], list1[-(len(list1))]


def split_head(seq):
    return seq[0], seq[1:]


p, q = split_head(list1)
print type(p), p
print type(q), q
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
set1 = {'A', 'P', 'P', 'L', 'E'}
print set1
set2 = set(list('BANANA'))
print set2
set3 = set1 | set2
print set3
set4 = set1 & set2
print set4
set5 = set1 ^ set2
print set5
set3 = {'A', 'B', 'N', 'P'}
print set2 < set3, set3 < set2
set4 = {'P', 'Q'}
print set2 < set4, set2 > set4
set5 = {'A', 'B', 'N'}
print set2 < set5, set2 > set5
print len(set3)

set5.add('!')
print set5
#set3.add(set4) # <-- this will have exception
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class Course:
    def __init__(self, name, hour):
        self.name = name
        self.hour = hour

    def __str__(self):
        return "[%s]%s" % (str(self.name), str(self.hour))

    def __repr__(self):
        return str(self)


c1 = Course('BDPY', 35)
c2 = Course('BDPY', 35)
c3 = c1
c4 = Course('PYKT', 35)
s1 = {c1, c2, c3, c4}
s2 = {c1, c3}
print type(s1), s1
print type(s2), s2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class Course:
    def __init__(self, name, hour):
        self.name = name
        self.hour = hour

    def __str__(self):
        return "[%s]%s" % (str(self.name), str(self.hour))

    def __repr__(self):
        return str(self)

    def __hash__(self):
        return hash((self.name, self.hour))

    def __eq__(self, other):
        return self.name == other.name and self.hour == other.hour


c1 = Course('BDPY', 35)
c2 = Course('BDPY', 35)
c3 = c1
c4 = Course('PYKT', 35)
c5 = Course('BDPY', 42)
s1 = {c1, c2, c3, c4, c5}
s2 = {c1, c3}
print type(s1), s1
print type(s2), s2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
set1 = {'A', 'P', 'P', 'L', 'E'}
print set1
set2 = set(list('BANANA'))
print set2
set3 = set1 | set2
print set3
set4 = set1 & set2
print set4
set5 = set1 ^ set2
print set5
set3 = {'A', 'B', 'N', 'P'}
print set2 < set3, set3 < set2
set4 = {'P', 'Q'}
print set2 < set4, set2 > set4
set5 = {'A', 'B', 'N'}
print set2 < set5, set2 > set5
print len(set3)

set5.add('!')
print set5
# set3.add(set4) # <-- this will have exception
for p in set4:
    set3.add(p)
print 'after add by each:', set3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sales = {'iphone6': 500, 'iphone7': 800, 'iphone8': 1000, 'iphoneXS': 1500}
print type(sales)
print sales['iphoneXS'], sales['iphone8']
# print sales['xxxx']
print sales.get('iphoneXR'), sales.get('iphoneXS')
sales['iphoneXR'] = 700
print sales
print 'watch4' in sales, 'iphone7' in sales
for x in sales:
    print x,sales[x]

for x in sales.keys():
    print x, sales.get(x)

for y in sales.values():
    print y,
print "\n"

for z  in sales.items():
    print type(z),z[0],z[1]

sales.update({'ipad':300,'iphone7':1800})
for p,q in sales.items():
    print p,q

git --vesion
git config --global user.name "mark Ho"

git config --global user.email "mark@uuu.com"
cd C:\Users\Admin
more .gitconfig

https://github.com/

README.md
# BDPY 17-21Jun 2019

## Install Python2.7
## Install Python3.7
## Install Pycharm

### demo31

### demo32

add readme.md